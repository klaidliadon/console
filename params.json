{"name":"Console","tagline":"A logging package for Go","body":"# Welcome\r\n[![GoDoc](https://godoc.org/gopkg.in/klaidliadon/console.v1?status.svg)](https://godoc.org/gopkg.in/klaidliadon/console.v1)\r\n[![Build Status](https://travis-ci.org/klaidliadon/console.svg)](https://travis-ci.org/klaidliadon/console)\r\n[![codecov.io](http://codecov.io/github/klaidliadon/console/coverage.svg?branch=master)](http://codecov.io/github/klaidliadon/console?branch=master)\r\n\r\nConsole is a logger package for Go with the following features:\r\n\r\n- Multiple priorities\r\n- Fully configurable\r\n- Thread safe\r\n- Runtime execution of `func() string` arguments\r\n- Introduces `Hooks` that can match some messages and reply with some actions.\r\n\r\n## Usage\r\n\r\nIt's recommended to use `gopkg.in` to ensure to use a stable version.\r\n\r\n```go\r\nimport (\r\n\t\"gopkg.in/klaidliadon/console.v1\"\r\n)\r\n```\r\n\r\n\r\n### Basic Usage\r\n\r\nThe standard console uses `os.Stdout`:\r\n\r\n```go\r\nc := console.Std()\r\nc.Info(\"This is console\")\r\n```\r\n\r\n### Custom Console\r\n\r\nYou can define your custom logger and use it:\r\n\r\n```go\r\n// Create a *console.Console\r\nvar custom = console.New(console.Cfg{\r\n\tColor: true, \r\n\tDate: console.DateFull,\r\n}, w)\r\ncustom.Trace(\"Ignored message %d\", 1)\r\ncustom.Info(\"Message not ignored %d\", 1)\r\n```\r\n\r\n## Features\r\n\r\n### Runtime execution\r\n\r\nYou can use a `func() string` as argument. Instead\r\nof the function the result string will be printed.\r\nIf the message is ignored the function will not be executed.\r\n\r\n```go\r\nvar a = Tree{} // With a very expensive String method\r\n\r\nl := console.New(console.Cfg{Lvl: console.LvlDebug})\r\n// Tree.String is executed\r\nl.Info(\"Method result: %s\", a)\r\n// Tree.String is ignored\r\nl.Trace(\"Method result: %s\", a)\r\n```\r\n\r\n### Hooks\r\n\r\nAn hook is interface used to capture certain conditions and execute an action.\r\n\r\nHere's an example:\r\n\r\n```go\r\ntype Mailer struct {\r\n\tId   int64\r\n\tlvl  console.Lvl\r\n\tAddr string\r\n\tAuth smtp.Auth\r\n\tFrom string\r\n\tTo   []string\r\n}\r\n\r\nfunc (m Mailer) Id() string {\r\n\treturn fmt.Sprintf(\"mailer-hook-%d\", m.Id) \r\n}\r\n\r\nfunc (m Mailer) Match(l Lvl, _, _ string, _ ...interface{}) bool { \r\n\treturn l == s.Lvl\r\n}\r\n\r\nfunc (m Mailer) Action(l Lvl, msg, _ string, _ ...interface{}) { \r\n\tsmtp.SendMail(m.Addr, m.Auth, m.From, m.To, fmt.Sprintf(\"[%s] from MailHook: %s\", l, msg)\r\n}\r\n```\r\n\r\nThis hook captures the messages from a certain level and sends an email with the message content.\r\n\r\n## Help\r\n\r\nFor a complete reference read the [docs](http://godoc.org/gopkg.in/klaidliadon/console.v1 \"Godoc\").\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}